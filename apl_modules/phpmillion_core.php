<?php
//core functions used in all phpmillion apps


//encrypt/decrypt text with salt provided as function's parameter
function customEncrypt($text, $key)
    {
    return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, padEncryptionSalt($key), $text, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))));
    }
function customDecrypt($text, $key)
    {
    return trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, padEncryptionSalt($key), base64_decode($text), MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND)));
    }


//pad encryption salt (key) with \0 because PHP >=5.6 only accepts 16/24/32 symbols (used to maintain compatibility with old keys)
function padEncryptionSalt($salt)
    {
    $allowed_lengths_array=array(16, 24, 32); //set allowed length
    $allowed_length_max=max($allowed_lengths_array);

    if (strlen($salt)>$allowed_length_max) //salt too long, cut it
        {
        $salt=substr($salt, 0, $allowed_length_max);
        }

    if (strlen($salt)<$allowed_length_max) //salt too short, pad with zeros
        {
        foreach ($allowed_lengths_array as $length) //loop through length and pad salt
            {
            while (strlen($salt)<$length)
                {
                $salt=$salt."\0";
                }

            if (strlen($salt)==$length) //nearest length reached
                {
                break;
                }
            }
        }

    return $salt;
    }


//generate random salt
function generateSalt($salt_length)
    {
    $final_salt="";
    $symbols_list="1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM";
    $symbols_length=strlen($symbols_list);

    if (filter_var($salt_length, FILTER_VALIDATE_INT))
        {
        for ($i=0; $i<$salt_length; $i++)
            {
            $random_symbol=substr($symbols_list, mt_rand(0, $symbols_length-1), 1);
            $final_salt.=$random_symbol;
            }
        }

    return $final_salt;
    }


//check if variable is empty (standard PHP function returns true when variable is "0" (string) and has problems with constants prior ver 5.5)
function isEmpty($var)
    {
    if (empty($var) && strlen(trim($var))==0)
        {
        $result=true;
        }
    else
        {
        $result=false;
        }

    return $result;
    }


//parse values between specified xml-like tags
function parseXmlTags($content, $tag_name)
    {
    $parsed_value="";

    if (!empty($content) && !empty($tag_name))
        {
        preg_match_all("/<".preg_quote($tag_name, "/").">(.*?)<\/".preg_quote($tag_name, "/").">/ims", $content, $output_array, PREG_SET_ORDER);

        if (!empty($output_array[0][1]))
            {
            $parsed_value=trim($output_array[0][1]);
            }
        }

    return $parsed_value;
    }


//parse license notifications tags generated by APL server
function parseLicenseNotifications($content)
    {
    $notifications_array=array();

    if (!empty($content))
        {
        preg_match_all("/<notification_([a-z_]+)>(.*?)<\/notification_([a-z_]+)>/", $content, $output_array, PREG_SET_ORDER); //parse <notification_case> along with message

        if (!empty($output_array[0][1]) && $output_array[0][1]==$output_array[0][3] && !empty($output_array[0][2])) //check if both notification tags are the same and contain text inside
            {
            $notifications_array['notification_case']="notification_".$output_array[0][1];
            $notifications_array['notification_text']=$output_array[0][2];
            }
        }

    return $notifications_array;
    }


//validate numbers (or ranges like 1-10) and check if they match min and max values
function validateNumberOrRange($number, $min_value, $max_value)
    {
    $result=false;

    if (filter_var($number, FILTER_VALIDATE_INT)===0 || !filter_var($number, FILTER_VALIDATE_INT)===false) //number provided
        {
        if ($number>=$min_value && $number<=$max_value)
            {
            $result=true;
            }
        else
            {
            $result=false;
            }
        }

    if (stristr($number, "-")) //range provided
        {
        $numbers_array=explode("-", $number);
        if (filter_var($numbers_array[0], FILTER_VALIDATE_INT)===0 || !filter_var($numbers_array[0], FILTER_VALIDATE_INT)===false && filter_var($numbers_array[1], FILTER_VALIDATE_INT)===0 || !filter_var($numbers_array[1], FILTER_VALIDATE_INT)===false)
            {
            if ($numbers_array[0]>=$min_value && $numbers_array[1]<=$max_value && $numbers_array[0]<=$numbers_array[1])
                {
                $result=true;
                }
            else
                {
                $result=false;
                }
            }
        }

    return $result;
    }


//get current page url (also remove specific strings and last slash if needed)
function getCurrentUrl($remove_last_slash, $string_to_remove_array)
    {
    $current_url="";

    $protocol=!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS']!=="off" ? 'https' : 'http';
    $host=$_SERVER['HTTP_HOST'];
    $script=$_SERVER['SCRIPT_NAME'];
    $params=$_SERVER['QUERY_STRING'];

    if (!empty($protocol) && !empty($host) && !empty($script)) //return URL only when script is executed via browser (because no URL should exist when executed from command line)
        {
        $current_url=$protocol.'://'.$host.$script;

        if (!empty($params))
            {
            $current_url.='?'.$params;
            }

        if (!empty($string_to_remove_array) && is_array($string_to_remove_array)) //remove specific strings from URL
            {
            foreach ($string_to_remove_array as $key=>$value)
                {
                $current_url=str_ireplace($value, "", $current_url);
                }
            }

        if ($remove_last_slash==1) //remove / from the end of URL if it exists
            {
            while (substr($current_url, -1)=="/") //use cycle in case URL already contained multiple // at the end
                {
                $current_url=substr($current_url, 0, -1);
                }
            }
        }

    return $current_url;
    }


//get raw domain (returns (sub.)domain.com from url like http://www.(sub.)domain.com/something.php?xx=yy)
function getRawDomain($url)
    {
    $raw_domain="";

    if (!empty($url))
        {
        $url_array=parse_url($url);
        if (empty($url_array['scheme'])) //in case no scheme was provided in url, it will be parsed incorrectly. add http:// and re-parse
            {
            $url="http://".$url;
            $url_array=parse_url($url);
            }

        if (!empty($url_array['host']))
            {
            $raw_domain=$url_array['host'];

            $raw_domain=trim(str_ireplace("www.", "", filter_var($raw_domain, FILTER_SANITIZE_URL)));
            }
        }

    return $raw_domain;
    }


//validate raw domain (only URL like (sub.)domain.com will validate)
function validateRawDomain($url)
    {
    $result=false;

    if (!empty($url))
        {
        if (preg_match('/^[a-z0-9-.]+\.[a-z\.]{2,7}$/', strtolower($url))) //check if this is valid tld
            {
            $result=true;
            }
        else
            {
            $result=false;
            }
        }

    return $result;
    }


//return root url from long url (http://www.domain.com/path/file.php?aa=xx becomes http://www.domain.com/path/), remove scheme, www. and last slash if needed
function getRootUrl($url, $remove_scheme, $remove_www, $remove_path, $remove_last_slash)
    {
    if (filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED | FILTER_FLAG_HOST_REQUIRED))
        {
        $url_array=parse_url($url); //parse URL into arrays like $url_array['scheme'], $url_array['host'], etc

        $url=str_ireplace($url_array['scheme']."://", "", $url); //make URL without scheme, so no :// is included when searching for first or last /

        if ($remove_path==1) //remove everything after FIRST / in URL, so it becomes "real" root URL
            {
            $first_slash_position=stripos($url, "/"); //find FIRST slash - the end of root URL
            if ($first_slash_position>0) //cut URL up to FIRST slash
                {
                $url=substr($url, 0, $first_slash_position+1);
                }
            }
        else //remove everything after LAST / in URL, so it becomes "normal" root URL
            {
            $last_slash_position=strripos($url, "/"); //find LAST slash - the end of root URL
            if ($last_slash_position>0) //cut URL up to LAST slash
                {
                $url=substr($url, 0, $last_slash_position+1);
                }
            }

        if ($remove_scheme!=1) //scheme was already removed, add it again
            {
            $url=$url_array['scheme']."://".$url;
            }

        if ($remove_www==1) //remove www.
            {
            $url=str_ireplace("www.", "", $url);
            }

        if ($remove_last_slash==1) //remove / from the end of URL if it exists
            {
            while (substr($url, -1)=="/") //use cycle in case URL already contained multiple // at the end
                {
                $url=substr($url, 0, -1);
                }
            }
        }

    return trim($url);
    }


//make get requests with cookies, referrers, etc
function customGet($url, $refer, $header_array)
    {
    $USER_AGENT="Mozilla/5.0 (Windows NT 6.3; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0";

    if (!isset($CONNECT_TIMEOUT) || !filter_var($CONNECT_TIMEOUT, FILTER_VALIDATE_INT)) {$CONNECT_TIMEOUT=10;} //use 10 seconds by default when no timeout is set
    if (!isset($refer) ||  !filter_var($refer, FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED | FILTER_FLAG_HOST_REQUIRED)) {$refer=$url;} //use original url as refer when no valid URL provided

    $ch=curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_USERAGENT, $USER_AGENT);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $CONNECT_TIMEOUT);
    curl_setopt($ch, CURLOPT_TIMEOUT, $CONNECT_TIMEOUT);
    curl_setopt($ch, CURLOPT_REFERER, $refer);
    if (is_array($header_array)) //add custom header
        {
        curl_setopt($ch, CURLOPT_HTTPHEADER, $header_array);
        }
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
    $result=curl_exec($ch);
    curl_close($ch);

    return $result;
    }


//make post requests with cookies, referrers, etc
function customPost($url, $refer, $post_info)
    {
    $USER_AGENT="Mozilla/5.0 (Windows NT 6.3; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0";

    if (!isset($CONNECT_TIMEOUT) || !filter_var($CONNECT_TIMEOUT, FILTER_VALIDATE_INT)) {$CONNECT_TIMEOUT=10;} //use 10 seconds by default when no timeout is set
    if (!isset($refer) ||  !filter_var($refer, FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED | FILTER_FLAG_HOST_REQUIRED)) {$refer=$url;} //use original url as refer when no valid URL provided

    $ch=curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_USERAGENT, $USER_AGENT);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $CONNECT_TIMEOUT);
    curl_setopt($ch, CURLOPT_TIMEOUT, $CONNECT_TIMEOUT);
    curl_setopt($ch, CURLOPT_REFERER, $refer);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_info);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
    $result=curl_exec($ch);
    curl_close($ch);

    return $result;
    }


//verify date according to provided format (such as Y-m-d)
function verifyDate($date, $date_format)
    {
    $datetime=DateTime::createFromFormat($date_format, $date);
    $errors=DateTime::getLastErrors();
    if (!$datetime || !empty($errors['warning_count'])) //date was invalid
        {
        $date_check_ok=false;
        }
    else //everything OK
        {
        $date_check_ok=true;
        }

    return $date_check_ok;
    }


//calculate number of days between dates
function getDaysBetweenDates($date_from, $date_to)
    {
    $number_of_days=0;

    if (verifyDate($date_from, "Y-m-d") && verifyDate($date_to, "Y-m-d"))
        {
        $date_to=new DateTime($date_to);
        $date_from=new DateTime($date_from);
        $number_of_days=$date_from->diff($date_to)->format("%a");
        }

    return $number_of_days;
    }


//convert objects into arrays
function convertObjectToArray($arrObjData, $arrSkipIndices=array())
    {
    $arrData=array();

    if (is_object($arrObjData)) //if input is object, convert into array
        {
        $arrObjData = get_object_vars($arrObjData);
        }

    if (is_array($arrObjData))
        {
        foreach ($arrObjData as $index=>$value)
            {
            if (is_object($value) || is_array($value))
                {
                $value=convertObjectToArray($value, $arrSkipIndices); //recursive call
                }
            if (in_array($index, $arrSkipIndices))
                {
                continue;
                }
            $arrData[$index]=$value;
            }
        }

    return $arrData;
    }


//create slug from string
function slugifyText($string)
    {
    if (!empty($string))
        {
        $string=preg_replace('/[^A-Za-z0-9-]+/', '-', $string);
        }

    return $string;
    }


//remove invisible HTML tags, including invisible text such as style and script code, embedded objects, and others (strip_tags would only remove tags but leave content between them)
function removeInvisibleHtml($content)
    {
	$content=preg_replace(
    array(
        '@<!--[^>]*?.*?-->@siu',
        '@<applet[^>]*?.*?</applet>@siu',
        '@<area[^>]*?.*?</area>@siu',
        '@<audio[^>]*?.*?</audio>@siu',
        '@<button[^>]*?.*?</button>@siu',
        '@<canvas[^>]*?.*?</canvas>@siu',
        '@<datalist[^>]*?.*?</datalist>@siu',
        '@<embed[^>]*?.*?</embed>@siu',
        '@<fieldset[^>]*?.*?</fieldset>@siu',
        '@<form[^>]*?.*?</form>@siu',
        '@<frame[^>]*?.*?</frame>@siu',
        '@<frameset[^>]*?.*?</frameset>@siu',
        '@<head[^>]*?>.*?</head>@siu',
        '@<iframe[^>]*?.*?</iframe>@siu',
        '@<input[^>]*?.*?>@siu',
        '@<keygen[^>]*?.*?</keygen>@siu',
        '@<map[^>]*?.*?</map>@siu',
        '@<noembed[^>]*?.*?</noembed>@siu',
        '@<noframes[^>]*?.*?</noframes>@siu',
        '@<noscript[^>]*?.*?</noscript>@siu',
        '@<object[^>]*?.*?</object>@siu',
        '@<output[^>]*?.*?</output>@siu',
        '@<script[^>]*?.*?</script>@siu',
        '@<select[^>]*?.*?</select>@siu',
        '@<textarea[^>]*?.*?</textarea>@siu',
        '@<track[^>]*?.*?</track>@siu',
        '@<video[^>]*?.*?</video>@siu'
    ),
    array(
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
    ),
    $content); //remove invisible/dangerous tags (and content between them) that should never be used in any string ()

	return trim($content); //return clean content
    }



//remove HTML tags, excess whitespace and non-printable characters
function cleanupContent($content)
    {
    $content=removeInvisibleHtml($content); //remove invisible HTML tags first (strip_tags would only remove tags but leave content between them)
    $content=strip_tags($content); //remove all tags
    $content=preg_replace("/[^\p{L}[:print:]\s]/u", "", $content); //remove all non-printable characters
    $content=preg_replace("/( )+/", " ", $content); //replace excess whitespace with single whitespace, preserving new lines

	return trim($content); //return clean content
    }


//format and return status text and class array
function returnFormattedStatusArray($status, $active_text, $inactive_text, $suspended_text)
    {
    if ($status==0) {$item_array['status_text']=$inactive_text; $item_array['status_class']="label label-danger";}
    if ($status==1) {$item_array['status_text']=$active_text; $item_array['status_class']="label label-success";}
    if ($status==2) {$item_array['status_text']=$suspended_text; $item_array['status_class']="label label-warning";}

    $root_array=$item_array;

    return $root_array;
    }


//format green/red report status and text depending on report failure number
function returnFormattedReportStatusArray($report_failure, $success_text, $failure_text)
    {
    if ($report_failure==0) {$item_array['status_text']=$success_text; $item_array['status_class']="label label-success";}
    if ($report_failure==1) {$item_array['status_text']=$failure_text; $item_array['status_class']="label label-danger";}

    $root_array=$item_array;

    return $root_array;
    }


//truncate text by number of symbols or words (text will be limited up to $max_length symbols/words)
function truncateText($content, $max_length, $truncate_type, $finish_sentence, $add_final_dot)
    {
    $text_truncated="";

    if (FILTER_VAR($max_length, FILTER_VALIDATE_INT)) //in case no limit is specified, don't truncate text
        {
        if ($truncate_type=="symbols") //truncate text by symbols
            {
            $current_length=strlen($content);
            if ($current_length>$max_length) //content length exceeded, truncate
                {
                $content=preg_replace("/\s+?(\S+)?$/", "", substr($content, 0, $max_length));
                $text_truncated=1; //will be used when ... needs to be added at the end (so ... is not added to text which was not truncated)
                }
            }

        if ($truncate_type=="words") //truncate text by words
            {
            $content=preg_replace("/\s\s+/", " ", $content); //replace new lines and excess whitespace with single whitespace
            $words_array=explode(" ", $content); //make an array of individual words

            if (count($words_array)>$max_length) //content length exceeded, truncate
                {
                $words_array=array_slice($words_array, 0, $max_length);

                $content=implode(" ", $words_array);
                $text_truncated=1; //will be used when ... needs to be added at the end (so ... is not added to text which was not truncated)
                }
            }

        $content=trim($content);
        }

    $end_symbols_array=array(".", "?", "!"); //an array with symbols that can be used at the end of text
    $last_symbol=substr($content, -1); //get the last symbol of current content

    if ($finish_sentence==1) //truncate content at the end of sentence, so it doesn't look like "this is some..."
        {
        while (!in_array($last_symbol, $end_symbols_array)) //truncate text just when one of end symbols is detected
            {
            $content=substr($content, 0, -1);
            $last_symbol=substr($content, -1);
            }
        }

    if ($add_final_dot==1 && !in_array($last_symbol, $end_symbols_array)) //add . to the end if needed
        {
        $content.=".";
        }

    if ($add_final_dot==2 && $text_truncated==1 && !in_array($last_symbol, $end_symbols_array)) //add ... to the end if needed
        {
        $content.="...";
        }

    return $content;
    }


//format and return nice numbers dropdown array
function returnNumbersDropdownArray($numbers_array, $title, $disabled_title, $current_value)
    {
    $root_array=array();

    if (is_array($numbers_array) && !empty($title) && !empty($disabled_title))
        {
        foreach ($numbers_array as $value)
            {
            $item_array['value']=$value;
            $item_array['title']=$value; //use $value as option title by default

            if ($value==0 && !empty($disabled_title)) //format disabled title when value is 0
                {
                $item_array['title']=$disabled_title;
                }

            if ($value>0 && !empty($title)) //format title by adding a specific word to it
                {
                $item_array['title'].=" $title";

                if ($value==1 && substr($item_array['title'], -1)=="s") //remove last "s" if needed, so "1 records" becomes "1 record"
                    {
                    $item_array['title']=substr($item_array['title'], 0, -1);
                    }
                }

            if ($value==$current_value) //this value should be selected
                {
                $item_array['selected']=" selected";
                }
            else
                {
                $item_array['selected']="";
                }

            $root_array[]=$item_array;
            }
        }

    return $root_array;
    }
